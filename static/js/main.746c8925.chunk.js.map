{"version":3,"sources":["models/currencies.model.ts","components/CurrencyTable/CurrencyTable.tsx","components/CurrencyInput/CurrencyInput.tsx","constants/urls.constant.ts","components/CurrencyChange/CurrencyChange.tsx","utils/currency.utils.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Rate","CurrencyTable","props","currencies","currentValue","Table","striped","bordered","hover","rows","Object","keys","forEach","item","index","push","key","Math","ceil","renderRows","CurrencyInput","currentCurrency","useState","newCurrency","setNewCurrency","formDirty","setFormDirty","handleCurrentCurrencyChange","currency","className","InputGroup","DropdownButton","as","Prepend","variant","title","items","Dropdown","Item","eventKey","onSelect","renderDropdownItems","Append","Button","onClick","formSubmit","disabled","FormControl","defaultValue","onChange","e","val","target","value","valueChange","Text","EXCHANGE_API_ULR","CurrencyChange","startRate","endRate","getValuation","start","end","toFixed","Number","App","data","setData","fetching","setFetching","useEffect","checkLocalStorageIsNotEmpty","then","JSON","parse","localStorage","getItem","finally","Promise","resolve","reject","setItem","fetchExchangeAPI","catch","latestUpdatesUrl","formLatestUpdatesUrl","historyChangeUrl","formHistoryChangeUrl","fetch","res","json","stringify","response","currencyToCompare","base","USD","EUR","rates","date","Spinner","animation","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.746c8925.chunk.js","sourcesContent":["export enum Rate {\r\n    USD = 'USD',\r\n    CAD = 'CAD',\r\n    HKD = 'HKD',\r\n    ISK = 'ISK',\r\n    PHP = 'PHP',\r\n    DKK = 'DKK',\r\n    HUF = 'HUF',\r\n    CZK = 'CZK',\r\n    AUD = 'AUD',\r\n    RON = 'RON',\r\n    SEK = 'SEK',\r\n    IDR = 'IDR',\r\n    INR = 'INR',\r\n    BRL = 'BRL',\r\n    RUB = 'RUB',\r\n    HRK = 'HRK',\r\n    JPY = 'JPY',\r\n    THB = 'THB',\r\n    CHF = 'CHF',\r\n    SGD = 'SGD',\r\n    PLN = 'PLN',\r\n    EUR = 'EUR'\r\n}\r\n\r\nexport type CurrenciesRates = {\r\n    [key: string]: number\r\n}\r\n\r\nexport interface Currencies {\r\n    rates?: CurrenciesRates,\r\n    base: Rate,\r\n    date: string\r\n}","import React, {ReactElement} from 'react';\r\nimport {Table} from \"react-bootstrap\";\r\nimport {CurrenciesRates} from \"../../models/currencies.model\";\r\n\r\ninterface Props {\r\n    currencies: CurrenciesRates,\r\n    currentValue: number\r\n}\r\n\r\nconst CurrencyTable = (props: Props): ReactElement => {\r\n    const {currencies, currentValue} = props;\r\n\r\n    const renderRows = (): JSX.Element[] => {\r\n        const rows: JSX.Element[] = [];\r\n\r\n        Object.keys(currencies).forEach((item: string, index: number) => {\r\n            rows.push(\r\n                <tr key={index}>\r\n                    <td>{index + 1}</td>\r\n                    <td>{item}</td>\r\n                    <td>{Math.ceil((currencies[item] * currentValue) * 100) / 100}</td>\r\n                </tr>\r\n            )\r\n        })\r\n\r\n        return rows;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Table striped bordered hover>\r\n                <thead>\r\n                <tr>\r\n                    <th>#</th>\r\n                    <th>Currency</th>\r\n                    <th>Amount</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {renderRows()}\r\n                </tbody>\r\n            </Table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CurrencyTable;","import React, {ReactElement, SetStateAction, useState} from \"react\";\r\nimport {DropdownButton, InputGroup, Dropdown, FormControl, Button} from \"react-bootstrap\";\r\nimport {CurrenciesRates, Rate} from \"../../models/currencies.model\";\r\n\r\ninterface Props {\r\n    currentCurrency: Rate,\r\n    currentValue: number,\r\n    currencies: CurrenciesRates,\r\n    valueChange: (value: string) => void,\r\n    formSubmit: (value: Rate) => void\r\n}\r\n\r\nconst CurrencyInput = (props: Props): ReactElement => {\r\n    const {currentValue, currentCurrency, currencies} = props;\r\n    const [newCurrency, setNewCurrency] = useState(currentCurrency);\r\n    const [formDirty, setFormDirty] = useState(false);\r\n\r\n    const renderDropdownItems = (): JSX.Element[] => {\r\n        const items: JSX.Element[] = [];\r\n        Object.keys(currencies).forEach((item: string, index: number) => {\r\n            items.push(\r\n                <Dropdown.Item eventKey={item} key={index} onSelect={(eventKey: any): void => handleCurrentCurrencyChange(eventKey)}>\r\n                    {item}\r\n                </Dropdown.Item>\r\n            )\r\n        })\r\n\r\n        return items;\r\n    }\r\n\r\n    const handleCurrentCurrencyChange = (currency: string): void => {\r\n        setNewCurrency(currency as SetStateAction<any>);\r\n        setFormDirty(true);\r\n    }\r\n\r\n    const handleInputChange = (val: string): void => {\r\n        props.valueChange(val);\r\n    }\r\n\r\n    const handleSubmit = (): void => {\r\n        setFormDirty(false);\r\n        props.formSubmit(newCurrency);\r\n    }\r\n\r\n    const isBtnDisabled = (): boolean => {\r\n        return !formDirty;\r\n    }\r\n\r\n    return (\r\n        <div className='d-flex justify-content-between'>\r\n            <InputGroup className=\"mb-3\">\r\n                <DropdownButton\r\n                    as={InputGroup.Prepend}\r\n                    variant=\"outline-secondary\"\r\n                    title={newCurrency}\r\n                >\r\n                    {renderDropdownItems()}\r\n                </DropdownButton>\r\n                <InputGroup.Append>\r\n                    <Button variant=\"primary\" onClick={handleSubmit}\r\n                            disabled={isBtnDisabled()}>Submit</Button>\r\n                </InputGroup.Append>\r\n            </InputGroup>\r\n            <InputGroup>\r\n                <FormControl defaultValue={currentValue} onChange={(e) => handleInputChange(e.target.value)}/>\r\n                <InputGroup.Append className=\"align-items-start\">\r\n                    <InputGroup.Text>{currentCurrency}</InputGroup.Text>\r\n                </InputGroup.Append>\r\n            </InputGroup>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CurrencyInput;","export const EXCHANGE_API_ULR = 'https://api.exchangeratesapi.io';\r\nexport const START_AT = '2015-03-26'\r\nexport const END_AT = '2017-07-13'","import React, {ReactElement} from \"react\";\r\nimport {Rate} from \"../../models/currencies.model\";\r\nimport {calculateDifferenceInPercents} from \"../../utils/currency.utils\";\r\n\r\ninterface Props {\r\n    currentCurrency: Rate,\r\n    startRate: number,\r\n    endRate: number\r\n}\r\n\r\nconst CurrencyChange = (props: Props): ReactElement => {\r\n    const {currentCurrency, startRate, endRate} = props;\r\n\r\n    const getValuation = (): string => {\r\n        return (calculateDifferenceInPercents(endRate, startRate)).toFixed(2);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h5>\r\n                That is an index of how much {currentCurrency} changed its valuation between 2 dates: March 26th, 2015 and June 13th, 2017.\r\n            </h5>\r\n            <span>\r\n                Current currency is compared with USD, if current currency is USD -  we take EUR for comparison.\r\n            </span>\r\n            <div className={`valuation-text ${Number(getValuation()) > 0 ? 'text-success' : 'text-danger'}`}>\r\n                Valuation amount: {getValuation()}%\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default CurrencyChange;","export const calculateDifferenceInPercents = (start: number, end: number): number => {\r\n    return ((start - end) / start) * 100;\r\n}","import React, {SetStateAction, useEffect, useState} from 'react';\nimport './App.scss';\nimport CurrencyTable from \"./components/CurrencyTable/CurrencyTable\";\nimport CurrencyInput from \"./components/CurrencyInput/CurrencyInput\";\nimport {END_AT, EXCHANGE_API_ULR, START_AT} from \"./constants/urls.constant\";\nimport {Currencies, Rate} from \"./models/currencies.model\";\nimport {Spinner} from \"react-bootstrap\";\nimport CurrencyChange from \"./components/CurrencyChange/CurrencyChange\";\n\ninterface Data {\n    currencies: Currencies,\n    currentValue: number,\n    startRate: number,\n    endRate: number\n}\n\nfunction App() {\n    const [data, setData] = useState<Data>();\n    const [fetching, setFetching] = useState(false);\n\n    // We should better use Redux store or at least context, but I decided to use only local storage for this project because:\n    // 1) We need to show user information after page reload;\n    // 2) Project is small, so we won`t have any problems with props drilling\n    useEffect((): void => {\n        setFetching(true);\n        checkLocalStorageIsNotEmpty().then(() => {\n            setData({\n                currencies: JSON.parse(localStorage.getItem('currencies') as string),\n                currentValue: Number(localStorage.getItem('currentValue') as string),\n                startRate: Number(localStorage.getItem('startRate') as string),\n                endRate: Number(localStorage.getItem('endRate') as string),\n            });\n        }).finally(() => setFetching(false))\n    }, [])\n\n    const checkLocalStorageIsNotEmpty = (): Promise<void> => {\n        return new Promise<void>((resolve, reject) => {\n            if (!localStorage.getItem('currentValue')) {\n                localStorage.setItem('currentValue', '1');\n            }\n\n            if (!localStorage.getItem('currencies')) {\n                fetchExchangeAPI()\n                    .catch(() => reject())\n                    .finally(() => resolve())\n            } else {\n                resolve();\n            }\n        })\n    }\n\n    const fetchExchangeAPI = (currency?: Rate): Promise<void> => {\n        return new Promise<void>((resolve, reject) => {\n            const latestUpdatesUrl = formLatestUpdatesUrl(currency);\n            const historyChangeUrl = formHistoryChangeUrl(currency);\n\n            fetch(latestUpdatesUrl)\n                .then(res => res.json())\n                .then(res => {\n                    localStorage.setItem('currencies', JSON.stringify(res));\n\n                    fetch(historyChangeUrl)\n                        .then(response => response.json())\n                        .then(response => {\n                            const currencyToCompare = response.base === Rate.USD ? Rate.EUR : Rate.USD;\n\n                            localStorage.setItem('startRate', response.rates[START_AT][currencyToCompare]);\n                            localStorage.setItem('endRate', response.rates[END_AT][currencyToCompare]);\n                        })\n                        .finally(() => resolve());\n                })\n                .catch(() => reject());\n        })\n    }\n\n    const formLatestUpdatesUrl = (currency?: Rate): string => {\n        return currency ? `${EXCHANGE_API_ULR}/latest?base=${currency}` : `${EXCHANGE_API_ULR}/latest`;\n    }\n\n    const formHistoryChangeUrl = (currency?: Rate): string => {\n        return currency ? `${EXCHANGE_API_ULR}/history?start_at=${START_AT}&end_at=${END_AT}&base=${currency}`\n            : `${EXCHANGE_API_ULR}/history?start_at=${START_AT}&end_at=${END_AT}`;\n    }\n\n    const handleValueChange = (value: string): void => {\n        localStorage.setItem('currentValue', value);\n        setData({\n            ...data,\n            currentValue: Number(value)\n        } as SetStateAction<any>)\n    }\n\n    const handleFormSubmit = (newCurrency: Rate): void => {\n        setFetching(true);\n        fetchExchangeAPI(newCurrency)\n            .then(() => {\n                setData({\n                    ...data,\n                    currencies: JSON.parse(localStorage.getItem('currencies') as string),\n                    startRate: Number(localStorage.getItem('startRate') as string),\n                    endRate: Number(localStorage.getItem('endRate') as string)\n                } as SetStateAction<any>)\n                setFetching(false);\n        });\n    }\n\n    return (\n        <div className=\"app\">\n            {data && !fetching\n                ?   <>\n                        <div className=\"date\">\n                            Info from {data.currencies?.date}\n                        </div>\n                        <div className=\"container\">\n                            <CurrencyInput currentCurrency={data.currencies.base}\n                                           currentValue={data.currentValue}\n                                           currencies={data.currencies.rates || {}}\n                                           valueChange={handleValueChange}\n                                           formSubmit={handleFormSubmit}/>\n                            <CurrencyChange currentCurrency={data.currencies.base} startRate={data.startRate} endRate={data.endRate}/>\n                            <CurrencyTable currencies={data.currencies.rates || {}}\n                                           currentValue={data.currentValue}/>\n                        </div>\n                    </>\n                :   <Spinner animation=\"grow\" variant=\"dark\" />\n            }\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}